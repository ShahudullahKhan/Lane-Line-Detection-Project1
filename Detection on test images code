#importing some useful packages

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2
%matplotlib inline

#reading in an image
image = mpimg.imread('test_images/solidWhiteRight.jpg')

#printing out some stats and plotting
print('This image is:', type(image), 'with dimensions:', image.shape)
plt.imshow(image)  # if you wanted to show a single color channel image called 'gray', for example, call as plt.imshow(gray, cmap='gray')

import math

def grayscale(img):
    """Applies the Grayscale transform
    This will return an image with only one color channel
    but NOTE: to see the returned image as grayscale
    (assuming your grayscaled image is called 'gray')
    you should call plt.imshow(gray, cmap='gray')"""
    return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    # Or use BGR2GRAY if you read an image with cv2.imread()
    # return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
def canny(img, low_threshold, high_threshold):
    """Applies the Canny transform"""
    return cv2.Canny(img, low_threshold, high_threshold)

def gaussian_blur(img, kernel_size):
    """Applies a Gaussian Noise kernel"""
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)

def region_of_interest(img, vertices):
    """
    Applies an image mask.
    
    Only keeps the region of the image defined by the polygon
    formed from `vertices`. The rest of the image is set to black.
    `vertices` should be a numpy array of integer points.
    """
    #defining a blank mask to start with
    mask = np.zeros_like(img)   
    
    #defining a 3 channel or 1 channel color to fill the mask with depending on the input image
    if len(img.shape) > 2:
        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image
        ignore_mask_color = (255,) * channel_count
    else:
        ignore_mask_color = 255
        
    #filling pixels inside the polygon defined by "vertices" with the fill color    
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    
    #returning the image only where mask pixels are nonzero
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image



def draw_lines(img, lines, color=[255, 0, 0], thickness=2):
    """
    NOTE: this is the function you might want to use as a starting point once you want to 
    average/extrapolate the line segments you detect to map out the full
    extent of the lane (going from the result shown in raw-lines-example.mp4
    to that shown in P1_example.mp4).  
    
    Think about things like separating line segments by their 
    slope ((y2-y1)/(x2-x1)) to decide which segments are part of the left
    line vs. the right line.  Then, you can average the position of each of 
    the lines and extrapolate to the top and bottom of the lane.
    
    This function draws `lines` with `color` and `thickness`.    
    Lines are drawn on the image inplace (mutates the image).
    If you want to make the lines semi-transparent, think about combining
    this function with the weighted_img() function below
    """
    """"for line in lines:
        for x1,y1,x2,y2 in line:
            cv2.line(line_image, (x1, y1), (x2, y2), color, thickness)"""
    # Iterating over the "lines" and drawing lines on the blank image
    leftPts = []
    rightPts = []

    for line in lines:
        for x1,y1,x2,y2 in line:
            slope = (y2-y1) / (x2-x1)
            if np.isnan(float(slope)):
                continue
            if abs(slope) < 0.3:
                continue
                
            if slope > 0:
                rightPts.append((x1,y1))
                rightPts.append((x2,y2))
            elif slope < 0:
                leftPts.append((x1,y1))
                leftPts.append((x2,y2))
                print(type(leftPts))
                
        maxY = imshape[0]
        minY = imshape[0]/2
       # fitPts = []
        # two coordinates needed to form a line
        if len(leftPts) > 2:
            leftPts = np.array(leftPts)
            print(leftPts.shape)
            x = leftPts[:,0]
            y = leftPts[:,1]
            
            left_slope, left_b = np.polyfit(x,y,1)
            max_X_left = (maxY-left_b)/left_slope
            min_X_left = (minY-left_b)/left_slope
            
            # converting values from float to int
            max_X_left = int(max_X_left)
            min_X_left = int(min_X_left)
            maxY_i = int(maxY)
            minY_i = int(minY)
            cv2.line(line_image, (max_X_left,maxY_i), (min_X_left,minY_i), (255,0,0),10)        
            
        if len(rightPts) > 2:
            rightPts = np.array(rightPts)
            x = rightPts[:,0]
            y = rightPts[:,1]
            
            right_slope, right_b = np.polyfit(x,y,1)
            max_X_right = (maxY-right_b)/right_slope
            min_X_right = (minY-right_b)/right_slope
            max_X_right = int(max_X_right)
            min_X_right = int(min_X_right)
            maxY_i = int(maxY)
            minY_i = int(minY)
            cv2.line(line_image, (max_X_right,maxY_i), (min_X_right,minY_i),(255,0,0),10)
            
            
    
def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):
    """
    `img` should be the output of a Canny transform.
        
    Returns an image with hough lines drawn.
    """
    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)
    line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)
    draw_lines(line_img, lines)
    return line_img

# Python 3 has support for cool math symbols.

def weighted_img(img, initial_img, α=0.8, β=1., γ=0.):
    """
    `img` is the output of the hough_lines(), An image with lines drawn on it.
    Should be a blank image (all black) with lines drawn on it.
    
    `initial_img` should be the image before any processing.
    
    The result image is computed as follows:
    
    initial_img * α + img * β + γ
    NOTE: initial_img and img must be the same shape!
    """
    return cv2.addWeighted(initial_img, α, img, β, γ)
    


#Test Images
#Build your pipeline to work on the images in the directory "test_images"
#You should make sure your pipeline works well on these images before you try the videos.
import os
#os.listdir("test_images/")
dir=os.listdir("test_images/")
print(dir)
# needed parameters

# define kernel size for gaussian smoothing
kernelSize = 5 # must be an odd number(3,5,7,..)

# define canny parameters
lowThreshold = 55
highThreshold = 110

ignore_mask_color = 255

# define parameters for hough transformation
rho = 2 # distance resolution in pixels of the Hough grid
theta = np.pi/180 # angular resolution in radians of the Hough grid
threshold = 20 # minimum number of votes (intersections in the Hough grid cells)
min_line_length = 20 # minimum number of pixels making up a line
max_line_gap = 30 # maximum gap in pixels between connectable line segments

for file in dir:
    original_filename, ext = os.path.splitext(file)
    image = mpimg.imread("test_images/"+file)
    imshape = image.shape
    line_image = np.copy(image)*0
    # region of interest
    vertices = np.array([[(0, imshape[0]), (450,320), (560, 320), (imshape[1], imshape[0])]], dtype=np.int32)
    
    final_image = procImage(image)
    plt.imshow(final_image)
    new_filename = original_filename+"_out"+ext
    mpimg.imsave(new_filename, final_image, cmap='Greys_r')
    
    
  
# TODO: Build your pipeline that will draw lane lines on the test_images
# then save them to the test_images_output directory.
def procImage(image):
    # convert the image to grayscale
    gray = grayscale(image)

    # apply the GaussianBlur for image smoothing/blurring
    gray_blur = gaussian_blur(gray, kernelSize)

    # apply canny on smoothed image
    edges = canny(gray_blur, lowThreshold, highThreshold)

    # create a masked edges
    mask = np.zeros_like(edges)
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    masked_edges = cv2.bitwise_and(edges, mask)

    # Apply Hough Transform
    # Run Hough on edge detected image
    # Output "lines" is an array containing endpoints of detected line segments
    out_lines = hough_lines(masked_edges, rho, theta, threshold, min_line_length, max_line_gap)
    
    line_edges = cv2.addWeighted(image, 0.8, line_image, 1, 0)
    
    return line_edges
